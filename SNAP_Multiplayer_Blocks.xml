<blocks app="Snap! 4.2, http://snap.berkeley.edu" version="1"><block-definition s="Datensatz Bezeichnung= %&apos;key&apos; mit Wert= %&apos;value&apos;" type="reporter" category="other"><header></header><code></code><translations></translations><inputs><input type="%txt"></input><input type="%txt"></input></inputs><script><block s="doIf"><block s="reportOr"><block s="reportAnd"><block s="reportNot"><block s="reportIsA"><block var="key"/><l><option>text</option></l></block></block><block s="reportNot"><block s="reportIsA"><block var="key"/><l><option>number</option></l></block></block></block><block s="reportAnd"><block s="reportNot"><block s="reportIsA"><block var="value"/><l><option>text</option></l></block></block><block s="reportNot"><block s="reportIsA"><block var="value"/><l><option>number</option></l></block></block></block></block><script><custom-block s="throw %s"><l>ParameterMuessenTextOderZahlSein</l></custom-block><block s="doStopThis"><l><option>this block</option></l></block></script></block><block s="doDeclareVariables"><list><l>object</l></list></block><block s="doSetVar"><l>object</l><block s="reportNewList"><list><block var="key"/><block var="value"/></list></block></block><block s="doReport"><block var="object"/></block></script></block-definition><block-definition s="_serializeTable %&apos;list&apos;" type="reporter" category="other"><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>list</l></list><custom-block s="multiline %code"><l>if (!list) return null&#xD;&#xD;function unfold(data) {&#xD;  return { [data[0]]: (data[1] instanceof List) ? unfold(data[1].contents) : data[1]}&#xD;}&#xD;&#xD;function serialize(data) {&#xD;  return data&#xD;		  .map(item =&gt; unfold(item.contents))&#xD;    .reduce( (acc, val) =&gt; ({ ...acc, ...val }) )&#xD;}&#xD;&#xD;return JSON.stringify(serialize(list.contents))</l></custom-block></block><list><block var="list"/></list></block></block></script></block-definition><block-definition s="Sende als Name= %&apos;id&apos; Daten= %&apos;list&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%txt"></input><input type="%l"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="id"/><l><option>text</option></l></block></block><script><custom-block s="throw %s"><l>NameMussTextSein</l></custom-block><block s="doStopThis"><l><option>this block</option></l></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return window.drjume &#xD;         &amp;&amp; window.drjume.multiplayerSocket &#xD;           &amp;&amp; window.drjume.multiplayerSocket.readyState === window.drjume.multiplayerSocket.OPEN</l></block><list></list></block><script><block s="doSetVar"><l>list</l><block s="evaluate"><block s="reportJSFunction"><list><l>list</l></list><l>if (!list) return null&#xD;&#xD;function unfold(data) {&#xD;  return { [data[0]]: (data[1] instanceof List) ? unfold(data[1].contents) : data[1]}&#xD;}&#xD;&#xD;function flatten(data) {&#xD;  return data&#xD;		  .map(item =&gt; unfold(item.contents))&#xD;    .reduce( (acc, val) =&gt; ({ ...acc, ...val }) )&#xD;}&#xD;&#xD;return flatten(list.contents)</l></block><list><block var="list"/></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>id</l><l>flattenedData</l></list><l>if(flattenedData == null) return&#xD;window.drjume.multiplayerSocket.send(JSON.stringify({token: window.drjume.token, packet: {id, data: flattenedData}}))</l></block><list><block var="id"/><block var="list"/></list></block></script></block><block s="doWait"><l>0.05</l></block></script></block-definition><block-definition s="Verbinde zu Adresse= %&apos;host&apos; im Kanal= %&apos;channel&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%txt">snap.coffee-mill.net</input><input type="%txt"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="channel"/><l><option>text</option></l></block></block><script><custom-block s="throw %s"><l>KanalMussTextSein</l></custom-block><block s="doStopThis"><l><option>this block</option></l></block></script></block><block s="doRun"><block s="reportJSFunction"><list><l>host</l><l>token</l></list><l>if(window.drjume) {&#xD;  // delete old socket&#xD;  window.drjume.multiplayerSocket.close() &#xD;}&#xD;&#xD;window.drjume = {}&#xD;window.drjume.token = token&#xD;window.drjume.multiplayerData = {}&#xD;window.drjume.multiplayerSocket = new WebSocket(`wss://${host}`) &#xD;&#xD;window.drjume.multiplayerSocket.onmessage = function (e) {&#xD;  console.log(e.data)&#xD;  &#xD;  try {&#xD;    let {token: packetTocken, packet} = JSON.parse(e.data)&#xD;    if (packetTocken !== token) return &#xD;&#xD;    let {id, data} = packet&#xD;    window.drjume.multiplayerData[id] = data&#xD;  } catch (e) {&#xD;&#xD;  }&#xD;}</l></block><list><block var="host"/><block var="channel"/></list></block></script></block-definition><block-definition s="Empfange Daten mit Name= %&apos;id&apos;" type="reporter" category="other"><header></header><code></code><translations></translations><inputs><input type="%txt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>id</l></list><l>if(!window.drjume) return null&#xD;if(!window.drjume.multiplayerData[id]) return null&#xD;&#xD;return listify(window.drjume.multiplayerData[id])&#xD;&#xD;function listify(jsonObject) {&#xD;  if (jsonObject instanceof Array) {&#xD;    return new List(jsonObject.map(function(eachElement) { return listify(eachElement)}));&#xD;  } else if (jsonObject instanceof Object) {&#xD;    return new List(Object.keys(jsonObject).map(function(eachKey) { return new List([eachKey,listify(jsonObject[eachKey])])} ))&#xD;  } else {&#xD;    return jsonObject&#xD;  }&#xD;}</l></block><list><block var="id"/></list></block></block></script></block-definition><block-definition s="Hole Wert mit Bezeichnung= %&apos;key&apos; aus Daten= %&apos;list&apos;" type="reporter" category="other"><header></header><code></code><translations></translations><inputs><input type="%txt"></input><input type="%l"></input></inputs><script><block s="doIf"><block s="reportNot"><block var="list"/></block><script><block s="doReport"><l></l></block></script></block><block s="doIf"><block s="reportEquals"><block s="reportListLength"><block var="list"/></block><l>0</l></block><script><block s="doReport"><l></l></block></script></block><block s="doWarp"><script><block s="doForEach"><l>each item</l><block var="list"/><script><block s="doIf"><block s="reportEquals"><block s="reportListItem"><l>1</l><block var="each item"/></block><block var="key"/></block><script><block s="doReport"><block s="reportListItem"><l>2</l><block var="each item"/></block></block></script></block></script></block></script></block><block s="doReport"><l></l></block></script></block-definition><block-definition s="Alle bekannte Namen" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>if (!window.drjume) return&#xD;&#xD;return listify(Object.keys(window.drjume.multiplayerData))&#xD;&#xD;function listify(jsonObject) {&#xD;  if (jsonObject instanceof Array) {&#xD;    return new List(jsonObject.map(function(eachElement) { return listify(eachElement)}));&#xD;  } else if (jsonObject instanceof Object) {&#xD;    return new List(Object.keys(jsonObject).map(function(eachKey) { return new List([eachKey,listify(jsonObject[eachKey])])} ))&#xD;  } else {&#xD;    return jsonObject&#xD;  }&#xD;}</l></block><list></list></block></block></script></block-definition></blocks>